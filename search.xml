<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[kafka schema of the Confluent platform]]></title>
      <url>https://selfpoised.github.io/2016/12/03/kafka%20schema/</url>
      <content type="html"><![CDATA[<p>在消费kafka消息的时候，可能会有疑问，消息里是否自带schema，schema是如何在反序列化<br>消息的时候起作用的。实际上在conflument平台上，kafka消息格式如下：</p>
<table>
<thead>
<tr>
<th>Bytes</th>
<th>Area</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Magic Byte</td>
<td>Confluent serialization format version number; currently always 0.</td>
</tr>
<tr>
<td>1-4</td>
<td>Schema ID</td>
<td>4-byte schema ID as returned by the Schema Registry</td>
</tr>
<tr>
<td>5</td>
<td>Data</td>
<td>Avro serialized data in Avro’s binary encoding. The only exception is raw bytes, which will be written directly without any special Avro encoding.</td>
</tr>
</tbody>
</table>
<h4 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h4><p>encoder获取schema并且向schema registry请求一个schema id，若已存在则直接返回，若没有则新产生一个并注册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">import org.apache.avro.Schema;</div><div class="line">import org.apache.avro.generic.GenericData;</div><div class="line">import org.apache.avro.generic.GenericRecord;</div><div class="line">import org.apache.kafka.clients.producer.KafkaProducer;</div><div class="line">import org.apache.kafka.clients.producer.ProducerConfig;</div><div class="line">import org.apache.kafka.clients.producer.ProducerRecord;</div><div class="line">import java.util.Properties;</div><div class="line"></div><div class="line">Properties props = new Properties();</div><div class="line">props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;localhost:9092&quot;);</div><div class="line">props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</div><div class="line">          io.confluent.kafka.serializers.KafkaAvroSerializer.class);</div><div class="line">props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</div><div class="line">          io.confluent.kafka.serializers.KafkaAvroSerializer.class);</div><div class="line">props.put(&quot;schema.registry.url&quot;, &quot;http://localhost:8081&quot;);</div><div class="line">KafkaProducer producer = new KafkaProducer(props);</div><div class="line"></div><div class="line">String key = &quot;key1&quot;;</div><div class="line">String userSchema = &quot;&#123;\&quot;type\&quot;:\&quot;record\&quot;,&quot; +</div><div class="line">                    &quot;\&quot;name\&quot;:\&quot;myrecord\&quot;,&quot; +</div><div class="line">                    &quot;\&quot;fields\&quot;:[&#123;\&quot;name\&quot;:\&quot;f1\&quot;,\&quot;type\&quot;:\&quot;string\&quot;&#125;]&#125;&quot;;</div><div class="line">Schema.Parser parser = new Schema.Parser();</div><div class="line">Schema schema = parser.parse(userSchema);</div><div class="line">GenericRecord avroRecord = new GenericData.Record(schema);</div><div class="line">avroRecord.put(&quot;f1&quot;, &quot;value1&quot;);</div><div class="line"></div><div class="line">ProducerRecord&lt;Object, Object&gt; record = new ProducerRecord&lt;&gt;(&quot;topic1&quot;, key, avroRecord);</div><div class="line">try &#123;</div><div class="line">  producer.send(record);</div><div class="line">&#125; catch(SerializationException e) &#123;</div><div class="line">  // may need to do something with it</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h4><p>根据shema id从schema registry请求schema，并且在本地缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import org.apache.avro.generic.IndexedRecord;</div><div class="line">import kafka.consumer.ConsumerConfig;</div><div class="line">import kafka.consumer.ConsumerIterator;</div><div class="line">import kafka.consumer.KafkaStream;</div><div class="line">import kafka.javaapi.consumer.ConsumerConnector;</div><div class="line">import io.confluent.kafka.serializers.KafkaAvroDecoder;</div><div class="line">import kafka.message.MessageAndMetadata;</div><div class="line">import kafka.utils.VerifiableProperties;</div><div class="line">import org.apache.kafka.common.errors.SerializationException;</div><div class="line">import java.util.*;</div><div class="line"></div><div class="line">Properties props = new Properties();</div><div class="line">props.put(&quot;zookeeper.connect&quot;, &quot;localhost:2181&quot;);</div><div class="line">props.put(&quot;group.id&quot;, &quot;group1&quot;);</div><div class="line">props.put(&quot;schema.registry.url&quot;, &quot;http://localhost:8081&quot;);</div><div class="line"></div><div class="line">String topic = &quot;topic1&quot;;</div><div class="line">Map&lt;String, Integer&gt; topicCountMap = new HashMap&lt;&gt;();</div><div class="line">topicCountMap.put(topic, new Integer(1));</div><div class="line"></div><div class="line">VerifiableProperties vProps = new VerifiableProperties(props);</div><div class="line">KafkaAvroDecoder keyDecoder = new KafkaAvroDecoder(vProps);</div><div class="line">KafkaAvroDecoder valueDecoder = new KafkaAvroDecoder(vProps);</div><div class="line"></div><div class="line">ConsumerConnector consumer = kafka.consumer.Consumer.createJavaConsumerConnector(new ConsumerConfig(props));</div><div class="line"></div><div class="line">Map&lt;String, List&lt;KafkaStream&lt;Object, Object&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(</div><div class="line">    topicCountMap, keyDecoder, valueDecoder);</div><div class="line">KafkaStream stream = consumerMap.get(topic).get(0);</div><div class="line">ConsumerIterator it = stream.iterator();</div><div class="line">while (it.hasNext()) &#123;</div><div class="line">  MessageAndMetadata messageAndMetadata = it.next();</div><div class="line">  try &#123;</div><div class="line">    String key = (String) messageAndMetadata.key();</div><div class="line">    IndexedRecord value = (IndexedRecord) messageAndMetadata.message();</div><div class="line"></div><div class="line">    ...</div><div class="line">  &#125; catch(SerializationException e) &#123;</div><div class="line">    // may need to do something with it</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://stackoverflow.com/questions/31204201/apache-kafka-with-avro-and-schema-repo-where-in-the-message-does-the-schema-id" target="_blank" rel="external">Apache Kafka with Avro and Schema Repo - where in the message does the schema Id go?</a><br><a href="http://docs.confluent.io/3.1.1/schema-registry/docs/serializer-formatter.html" target="_blank" rel="external">Serializer and Formatter</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello Strangers]]></title>
      <url>https://selfpoised.github.io/2016/12/03/hello-strangers/</url>
      <content type="html"><![CDATA[<p>Welcome to my personal blog, more to come later!</p>
]]></content>
    </entry>
    
  
  
</search>
